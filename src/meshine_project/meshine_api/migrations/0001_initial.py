# Generated by Django 2.0.2 on 2018-04-08 18:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('firstname', models.CharField(max_length=255)),
                ('lastname', models.CharField(max_length=255)),
                ('mobile', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Animation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='AnimationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ObjectType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('score', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_summary_author', models.BooleanField(default=False)),
                ('last_modified_date', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.Question')),
            ],
            options={
                'verbose_name_plural': 'Question summaries',
            },
        ),
        migrations.CreateModel(
            name='Summary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('html_text', models.TextField(blank=True, unique=True)),
                ('url_local_path', models.CharField(max_length=255)),
                ('validated', models.BooleanField(default=False)),
                ('cover_image', models.CharField(max_length=255)),
                ('question_summary', models.ManyToManyField(through='meshine_api.QuestionSummary', to='meshine_api.Question')),
            ],
            options={
                'verbose_name_plural': 'Summaries',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('is_from_human', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TagCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.Category')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.Tag')),
            ],
            options={
                'verbose_name_plural': 'Tag categories',
            },
        ),
        migrations.CreateModel(
            name='UserProfileSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_author', models.BooleanField(default=False)),
                ('last_modified_date', models.DateTimeField(auto_now_add=True)),
                ('summary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.Summary')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User profile summaries',
            },
        ),
        migrations.AddField(
            model_name='summary',
            name='tag_category',
            field=models.ManyToManyField(to='meshine_api.TagCategory'),
        ),
        migrations.AddField(
            model_name='summary',
            name='user_profile_summary',
            field=models.ManyToManyField(through='meshine_api.UserProfileSummary', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='questionsummary',
            name='summary',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.Summary'),
        ),
        migrations.AddField(
            model_name='object',
            name='object_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.ObjectType'),
        ),
        migrations.AddField(
            model_name='object',
            name='summary',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.Summary'),
        ),
        migrations.AddField(
            model_name='category',
            name='tags',
            field=models.ManyToManyField(through='meshine_api.TagCategory', to='meshine_api.Tag'),
        ),
        migrations.AddField(
            model_name='animation',
            name='animation_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.AnimationType'),
        ),
        migrations.AddField(
            model_name='animation',
            name='object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meshine_api.Object'),
        ),
    ]
